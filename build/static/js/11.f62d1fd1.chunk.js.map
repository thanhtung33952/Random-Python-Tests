{"version":3,"sources":["utils/helpers.js","assets/jss/Page/FormCustomer.js","page/Form/FormDevice.js"],"names":["isEmail","mailAddress","test","String","toLowerCase","isNullOrEmpty","value","undefined","length","isNullOrUndefined","object","makeStyles","theme","root","titleForm","fontWeight","margin","fontSize","formContent","padding","position","formGroup","display","marginBottom","alignItems","width","color","fontStyle","inputControl","rootInput","thisInputError","thisInput","rowInline","formControlSelect","flex","chip","btnOpen","marginLeft","minWidth","rowSubmit","btnCance","boxLoading","height","top","left","justifyContent","backgroundColor","zIndex","iconProgress","marginTop","msgError","paddingRight","paddingTop","msgSuc","bGround","headFormGroup","flexDirection","marginIcon","selectErro","scrollPage","overflowY","FormDevice","classes","useStyles","useParams","device_id","useState","isNew","userData","deviceTypeId","useFormInput","code","imei","status","isLoading","isLoading2","msg","statusSubmit","className","clsx","classNames","style","variant","size","initValue","isRequire","isEmailControl","setValue","isFirst","setIsFirst","handleChange","e","target","useEffect","error","errorMsg","helperText","onChange","InputProps","input"],"mappings":"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","file":"static/js/11.f62d1fd1.chunk.js","sourcesContent":["export function isEmail(mailAddress) {\r\n  if (!mailAddress) {\r\n    return false;\r\n  }\r\n\r\n  // eslint-disable-next-line no-useless-escape\r\n  var re = /^(([^<>()\\[\\]\\.,;:\\s@\\\"]+(\\.[^<>()\\[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/i;\r\n  if (!re.test(String(mailAddress).toLowerCase())) {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nexport function isNullOrEmpty(value) {\r\n  return !value || value === undefined || value === '' || value.length === 0;\r\n}\r\n\r\nexport function isNullOrUndefined(object) {\r\n  return !object || object === undefined;\r\n}\r\n\r\nexport const convertFloat = val => {\r\n  try {\r\n    return parseFloat(val);\r\n  } catch (error) {\r\n    return 0;\r\n  }\r\n};\r\n\r\nexport const asyncForEach = async (array, callback) => {\r\n  for (let index = 0; index < array.length; index++) {\r\n    await callback(array[index], index, array);\r\n  }\r\n};\r\n\r\nexport const padClientID = (str, size) => {\r\n  let strResult = str;\r\n  while (strResult.length < (size || 2)) {\r\n    strResult = '0' + strResult;\r\n  }\r\n  return strResult;\r\n};\r\n","import { makeStyles } from '@material-ui/core/styles';\r\nimport { rowSubmit, btnCance } from '../../common';\r\nexport default makeStyles((theme) => ({\r\n  root: {},\r\n  titleForm: {\r\n    fontWeight: 600,\r\n    margin: '20px 20px 20px 40px',\r\n    fontSize: '1rem',\r\n  },\r\n  formContent: {\r\n    padding: 40,\r\n    position: 'relative',\r\n  },\r\n  formGroup: {\r\n    display: 'flex',\r\n    marginBottom: 20,\r\n    alignItems: 'center',\r\n    '& label': {\r\n      width: '25%',\r\n      '& em': {\r\n        color: 'red',\r\n        fontStyle: 'inherit',\r\n      },\r\n    },\r\n  },\r\n  inputControl: {\r\n    width: '80%',\r\n    '& p': {\r\n      margin: '5px 0 0',\r\n      fontSize: 10,\r\n    },\r\n  },\r\n  rootInput: {\r\n    '& fieldset': {\r\n      // borderColor: theme.palette.grey.light + `${'!important'}`,\r\n    },\r\n  },\r\n  thisInputError: {\r\n    '& fieldset': {\r\n      // borderColor: theme.palette.pink.main + `${'!important'}`,\r\n    },\r\n  },\r\n  thisInput: {\r\n    padding: 10,\r\n  },\r\n  rowInline: {\r\n    display: 'flex',\r\n    width: '80%',\r\n  },\r\n  formControlSelect: {\r\n    flex: '1 auto',\r\n    '& select': {\r\n      padding: 10,\r\n    },\r\n    '& fieldset': {\r\n      // borderColor: theme.palette.grey.light\r\n    },\r\n  },\r\n  chip: {\r\n    // backgroundColor: theme.palette.secondary.main,\r\n    color: '#fff',\r\n  },\r\n  btnOpen: {\r\n    marginLeft: 20,\r\n    minWidth: 200,\r\n    fontSize: '1rem',\r\n  },\r\n  rowSubmit: {\r\n    ...rowSubmit,\r\n  },\r\n  btnCance: {\r\n    ...btnCance,\r\n  },\r\n  boxLoading: {\r\n    position: 'absolute',\r\n    width: '100%',\r\n    height: '100%',\r\n    top: 0,\r\n    left: 0,\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    backgroundColor: 'rgba(255,255,255, 0.3)',\r\n    zIndex: 99999,\r\n  },\r\n  iconProgress: {\r\n    // color: theme.palette.grey.light,\r\n    position: 'absolute',\r\n    top: '50%',\r\n    left: '50%',\r\n    marginTop: -12,\r\n    marginLeft: -12,\r\n  },\r\n  msgError: {\r\n    // color: theme.palette.pink.main,\r\n    paddingRight: 50,\r\n    paddingTop: 15,\r\n  },\r\n  msgSuc: {\r\n    // color: theme.palette.green.main,\r\n    paddingRight: 50,\r\n    paddingTop: 15,\r\n  },\r\n  bGround: {\r\n    backgroundColor: 'yellow',\r\n    margin: '20px 40px 20px 20px',\r\n  },\r\n  headFormGroup: {\r\n    display: 'flex',\r\n    flexDirection: 'row',\r\n    alignItems: 'center',\r\n    justifyContent: 'space-between'\r\n  },\r\n  marginIcon: {\r\n    marginLeft: -22,\r\n  },\r\n  selectErro: {\r\n    color: 'red',\r\n    marginLeft: '20%',\r\n    marginTop: -15,\r\n    fontSize: 10,\r\n    marginBottom: 20,\r\n  },\r\n  scrollPage :{\r\n    overflowY: 'auto',\r\n    height: 'calc(100vh - 220px)'\r\n  }\r\n}));\r\n","/* eslint-disable no-restricted-globals */\r\nimport React, { useState, useEffect } from 'react';\r\n// import axios from 'axios';\r\nimport classNames from 'classnames';\r\nimport clsx from \"clsx\";\r\n// constant\r\n// import { apiRoot } from 'constant/index.js';\r\nimport { useParams } from 'react-router-dom';\r\nimport { isEmail, isNullOrEmpty, isNullOrUndefined } from '../../utils/helpers';\r\n\r\n// material component\r\n// import Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport {\r\n  Typography,\r\n  // Divider,\r\n  TextField,\r\n  // FormControl,\r\n  // Select,\r\n  // InputLabel,\r\n  Button,\r\n  // FormHelperText\r\n} from '@material-ui/core';\r\n// icons\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n// import InputAdornment from '@material-ui/core/InputAdornment';\r\n// import LockIcon from '@mui/icons-material/LockOpen';\r\n// import IconButton from '@material-ui/core/IconButton';\r\n// import Visibility from '@mui/icons-material/Visibility';\r\n// import VisibilityOff from '@mui/icons-material/VisibilityOff';\r\n//component customer\r\n// import PopupDepartment from 'components/Users/PopupDepartment';\r\n// import PopupStatus from 'components/Users/PopupStatus';\r\n// import PopupQuestion from 'components/Popup/PopupQuestion';\r\n\r\n// jss\r\nimport useStyles from '../../assets/jss/Page/FormCustomer';\r\n// import { folderRoot } from '../../constant/index';\r\n\r\nexport default function FormDevice() {\r\n  const classes = useStyles();\r\n  // mode insert/update\r\n  let { device_id } = useParams();\r\n  const [isNew, setNewUser] = useState(true);\r\n  const [userData, setUserData] = useState(''); // userName, email, role, departmentId, approvalGroupId\r\n  // data form\r\n  const deviceTypeId = useFormInput(\r\n    !isNullOrUndefined(userData) && !isNullOrEmpty(userData)\r\n      ? userData : '',\r\n      true\r\n  );\r\n  const code = useFormInput(\r\n    !isNullOrUndefined(userData) && !isNullOrEmpty(userData)\r\n      ? userData : '',\r\n      true\r\n  );\r\n  \r\n  const imei = useFormInput(\r\n    !isNullOrUndefined(userData) && !isNullOrEmpty(userData)\r\n      ? userData : '',\r\n      true\r\n  );\r\n  // group data\r\n  // const [listGroup, setListGroup] = useState(null);\r\n  // const [groupSelect, setGroupSelect] = useState([]);\r\n  // // department data\r\n  // const [listDepartment, setListDepartment] = useState(null);\r\n  // // user status data\r\n  // const [listStatus, setListStatus] = useState(null);\r\n  // // list user\r\n  // const [users, setUsers] = useState([]);\r\n  // const [userSelect, setUserSelect] = useState([]);\r\n  // // flag submit\r\n  const [statusSubmit, setStatusSubmit] = useState({\r\n    status: 0, // -1: error, 1: success\r\n    isLoading: false,\r\n    isLoading2: false,\r\n    msg: ''\r\n  });\r\n  // get data on select box\r\n  // useEffect(() => {\r\n  //   // check isNew user\r\n  //   !isNullOrUndefined(user_id) && setNewUser(false);\r\n  //   // get data department\r\n  //   async function getDataDepartment() {\r\n  //     try {\r\n  //       const res = await axios.get(`${apiRoot}/departments`);\r\n  //       // error\r\n  //       if (res.status !== 200) {\r\n  //         return;\r\n  //       }\r\n  //       // success\r\n  //       setListDepartment(res.data.data);\r\n  //     } catch (error) {\r\n  //       return;\r\n  //     }\r\n  //   }\r\n  //   // get data user status\r\n  //   async function getDataStatus() {\r\n  //     try {\r\n  //       const res = await axios.get(`${apiRoot}/userstatus`);\r\n  //       // error\r\n  //       if (res.status !== 200) {\r\n  //         return;\r\n  //       }\r\n  //       // success\r\n  //       // console.log(res);\r\n  //       setListStatus(res.data.data);\r\n  //     } catch (error) {\r\n  //       return;\r\n  //     }\r\n  //   }\r\n  //   // get data approvalGroup\r\n  //   async function getListGroup() {\r\n  //     try {\r\n  //       const res = await axios.get(`${apiRoot}/approvalgroups`);\r\n  //       // error\r\n  //       if (res.status !== 200) {\r\n  //         return;\r\n  //       }\r\n  //       // success\r\n  //       // console.log(res)\r\n  //       setListGroup(res.data.data);\r\n  //     } catch (error) {\r\n  //       return;\r\n  //     }\r\n  //   }\r\n\r\n  //   // get list user\r\n  //   async function getListUser() {\r\n  //     try {\r\n  //       const res = await axios.get(`${apiRoot}/users`);\r\n  //       // error\r\n  //       if (res.status !== 200) {\r\n  //         return;\r\n  //       }\r\n  //       // success\r\n  //       setUsers(res.data.data);\r\n  //     } catch (error) {\r\n  //       return;\r\n  //     }\r\n  //   }\r\n\r\n  //   // get data user (nếu url có user id)\r\n  //   async function getDataUser(userId) {\r\n  //     try {\r\n  //       const res = await axios.get(`${apiRoot}/users/${userId}`);\r\n  //       // error\r\n  //       if (res.status !== 200) {\r\n  //         return;\r\n  //       }\r\n  //       // success\r\n  //       const result = res.data.data;\r\n  //       setUserData(result);\r\n\r\n  //       if (!isNullOrUndefined(result.approvalGroup)) {\r\n  //         setGroupSelect(result.approvalGroup);\r\n  //       }\r\n\r\n  //       if (!isNullOrUndefined(result.listBoss)) {\r\n  //         setUserSelect(result.listBoss);\r\n  //       }\r\n  //     } catch (error) {\r\n  //       return;\r\n  //     }\r\n  //   }\r\n  //   if (!isNullOrEmpty(user_id)) {\r\n  //     getDataUser(user_id);\r\n  //   }\r\n\r\n  //   getDataDepartment();\r\n  //   getDataStatus();\r\n  //   getListGroup();\r\n  //   getListUser();\r\n  // }, []);\r\n\r\n//   useEffect(() => {\r\n//     // console.log('user : ', name)\r\n//     if (!isNew || isNullOrUndefined(name) || isNullOrUndefined(name.value)) return;\r\n\r\n//     let newUsers = [...users];\r\n//     let userTemp = newUsers.find(x => x.id === 'it-me');\r\n\r\n//     // chưa gán chính nó\r\n//     if (isNullOrUndefined(userTemp)) {\r\n//       let newUserTemp = {\r\n//         id: 'it-me',\r\n//         userName: name.value\r\n//       }\r\n//       newUsers.push(newUserTemp);\r\n//       setUsers(newUsers);\r\n//       return;\r\n//     }\r\n//     // đã có chính nó trước đó\r\n//     userTemp.userName = name.value;\r\n\r\n//   }, [name])\r\n\r\n  // const handleChange = name => e => {\r\n  //   setUserData({\r\n  //     ...userData,\r\n  //     [name]: e.target.value\r\n  //   });\r\n  // };\r\n  // callback from component PopupDepartment\r\n//   const handleCallbackGroup = data => {\r\n//     setListDepartment(data);\r\n//   };\r\n//   // callback from component PopupStatus\r\n//   const handleCallbackGroupStatus = data => {\r\n//     setListStatus(data);\r\n//   };\r\n\r\n  // save user data\r\n//   const handleSave = async () => {\r\n//     if (!validation()) return;\r\n\r\n//     // show question mode update\r\n//     if (!isNew) {\r\n//       setOpenPopupQuestionUpdate(true);\r\n//       return;\r\n//     } else {\r\n//       setOpenPopupQuestion(true);\r\n//       return;\r\n//     }\r\n\r\n//     // // mode addnew user\r\n//     // handleAddnew();\r\n//   };\r\n// console.log(userData)\r\n// console.log(userData.password)\r\n// console.log(password.value)\r\n//   const handleUpdate = async flag => {\r\n//     setOpenPopupQuestionUpdate(false);\r\n//     if (flag === 'no' || isNullOrUndefined(user_id)) return;\r\n\r\n//     // call api\r\n//     setStatusSubmit({ ...statusSubmit, isLoading: true });\r\n//     // console.log(userData.password)\r\n//     // console.log(password.value)\r\n//     // console.log(password)\r\n//     const data = {\r\n//       userName: name.value,\r\n//       email: email.value,\r\n//       password: !isNullOrUndefined(password.value) ? password.value : null,\r\n//       // password: password.value,\r\n//       role: role.value,\r\n//         // !isNullOrUndefined(userData) && !isNullOrUndefined(userData.role)\r\n//         //   ? userData.role\r\n//         //   : 0, // 1,2 : admin;  0:user thường\r\n//       status : status.value,\r\n//       departmentId: departmentId.value,\r\n//       approvalGroup: isNullOrEmpty(groupSelect)\r\n//         ? []\r\n//         : groupSelect.map(e => {\r\n//             return {\r\n//               id: e.id,\r\n//               approvalGroupName: e.approvalGroupName\r\n//             };\r\n//           }),\r\n//       listBoss: isNullOrEmpty(userSelect)\r\n//       ? []\r\n//       : userSelect.map(e => {\r\n//           return {\r\n//             id: e.id === 'it-me' ? 0 : e.id,\r\n//             userName: e.userName\r\n//           };\r\n//         })\r\n//     };\r\n//     const result = await callAPIUser(data, user_id, password);\r\n//     // console.log(password.value)\r\n//     // error\r\n//     if (!result) {\r\n//       setStatusSubmit({\r\n//         ...statusSubmit,\r\n//         status: -1,\r\n//         isLoading: false,\r\n//         msg: '更新が失敗しました。'\r\n//       });\r\n//       return;\r\n//     }\r\n//     // success\r\n//     setStatusSubmit({\r\n//       ...statusSubmit,\r\n//       status: 1,\r\n//       isLoading: false,\r\n//       msg: '更新が完了しました。'\r\n//     });\r\n//     location.reload();\r\n//   };\r\n\r\n  // handle add new user\r\n//   const handleAddnew = async flag => {\r\n//     setOpenPopupQuestion(false)\r\n//     if (flag === 'no') return;\r\n//     // call api\r\n//     setStatusSubmit({ ...statusSubmit, isLoading: true });\r\n//     let data = {\r\n//       userName: name.value,\r\n//       email: email.value,\r\n//       // password: password.value !== userData.password ? password.value : null,\r\n//       password: password.value,\r\n//       role: role.value,\r\n//         // !isNullOrUndefined(userData) && !isNullOrUndefined(userData.role)\r\n//         //   ? userData.role\r\n//         //   : 0, // 1,2 : admin;  0:user thường\r\n//       status : status.value,\r\n//       departmentId: departmentId.value,\r\n//       approvalGroup: isNullOrEmpty(groupSelect)\r\n//         ? []\r\n//         : groupSelect.map(e => {\r\n//             return {\r\n//               id: e.id,\r\n//               approvalGroupName: e.approvalGroupName\r\n//             };\r\n//           }),\r\n//       listBoss: isNullOrEmpty(userSelect)\r\n//         ? []\r\n//         : userSelect.map(e => {\r\n//             return {\r\n//               id: e.id === 'it-me' ? 0 : e.id,\r\n//               userName: e.userName\r\n//             };\r\n//           })\r\n//     };\r\n//     const result = await callAPIUser(data, null);\r\n//     // console.log(result);\r\n//     // error\r\n//     if (!result) {\r\n//       setStatusSubmit({\r\n//         ...statusSubmit,\r\n//         status: -1,\r\n//         isLoading: false,\r\n//         msg: '新規登録が失敗しました。'\r\n//       });\r\n//       return;\r\n//     }\r\n//     // error: Email đã tồn tại\r\n//     if (result === -1) {\r\n//       setStatusSubmit({\r\n//         ...statusSubmit,\r\n//         status: -1,\r\n//         isLoading: false,\r\n//         msg: 'メールはすでに存在します'\r\n//       });\r\n//       return;\r\n//     }\r\n\r\n//     setUserData({\r\n//       ...userData,\r\n//       id: result.id\r\n//     });\r\n//     setStatusSubmit({\r\n//       ...statusSubmit,\r\n//       status: 1,\r\n//       isLoading: false,\r\n//       msg: '新規登録が完了しました。'\r\n//     });\r\n//     // mode insert nên sau khi insert thành công show question redirect url update user or ridirect url list user\r\n//     window.location.href = `${folderRoot}users/update/${result.id}`;\r\n//     // setOpenPopupQuestion(true);\r\n//   };\r\n\r\n  // save user data in button back\r\n//   const handleBack = async flag => {\r\n//     setOpenPopupQuestionBack(false);\r\n//     if (!validation() || flag === 'no') {\r\n//       return window.location.href = `${folderRoot}users`;\r\n//     }\r\n\r\n//     setStatusSubmit({ ...statusSubmit, isLoading2: true });\r\n//     const data = {\r\n//       userName: name.value,\r\n//       email: email.value,\r\n//       password: !isNullOrUndefined(password.value) ? password.value : null,\r\n//       // password: password.value,\r\n//       role: role.value,\r\n//         // !isNullOrUndefined(userData) && !isNullOrUndefined(userData.role)\r\n//         //   ? userData.role\r\n//         //   : 0, // 1,2 : admin;  0:user thường\r\n//       status : status.value,\r\n//       departmentId: departmentId.value,\r\n//       approvalGroup: isNullOrEmpty(groupSelect)\r\n//         ? []\r\n//         : groupSelect.map(e => {\r\n//             return {\r\n//               id: e.id,\r\n//               approvalGroupName: e.approvalGroupName\r\n//             };\r\n//           }),\r\n//       listBoss: isNullOrEmpty(userSelect)\r\n//       ? []\r\n//       : userSelect.map(e => {\r\n//           return {\r\n//             id: e.id === 'it-me' ? 0 : e.id,\r\n//             userName: e.userName\r\n//           };\r\n//         })\r\n//     };\r\n//     let userOrnull = isNew ? null : user_id;\r\n//     const result = await callAPIUser(data, userOrnull);\r\n//     // error\r\n//     if (!result) {\r\n//       setStatusSubmit({\r\n//         ...statusSubmit,\r\n//         status: -1,\r\n//         isLoading2: false,\r\n//         msg: isNew ? '新規登録が失敗しました。' : '更新が失敗しました。'\r\n//       });\r\n//       return;\r\n//     }\r\n//     // error: Email đã tồn tại\r\n//     if (isNew) {\r\n//       if (result === -1) {\r\n//         setStatusSubmit({\r\n//           ...statusSubmit,\r\n//           status: -1,\r\n//           isLoading2: false,\r\n//           msg: 'メールはすでに存在します'\r\n//         });\r\n//         return;\r\n//       }\r\n//     }\r\n//     // success\r\n//     setUserData({\r\n//       ...userData,\r\n//       id: result.id\r\n//     });\r\n//     setStatusSubmit({\r\n//       ...statusSubmit,\r\n//       status: 1,\r\n//       isLoading2: false,\r\n//       msg: isNew ? '新規登録が完了しました。' : '更新が完了しました。'\r\n//     });\r\n//     if (isNew) {\r\n//       // mode insert nên sau khi insert thành công cho redirect qua url users group theo users_id mới\r\n//       window.location.href = `${folderRoot}users/update/${result.id}`;\r\n//     } else {\r\n//       window.location.href = `${folderRoot}users`;\r\n//     }\r\n//   };\r\n\r\n  // validation\r\n//   const validation = () => {\r\n//     if (isNew) {\r\n//       if (\r\n//         !isNullOrEmpty(status.value) &&\r\n//         !isNullOrEmpty(departmentId.value) &&\r\n//         !isNullOrEmpty(name.value) &&\r\n//         !isNullOrEmpty(email.value) &&\r\n//         isEmail(email.value) &&\r\n//         !isNullOrEmpty(password.value) &&\r\n//         !isNullOrUndefined(rePassWord.value) &&\r\n//         (password.value === rePassWord.value)\r\n//       )\r\n//       return true;\r\n//     } else {\r\n//       if (\r\n//         (\r\n//         userData.userName !== name.value ||\r\n//         userData.status !== status.value ||\r\n//         userData.departmentId !== departmentId.value||\r\n//         userData.role !== role.value ||\r\n//         JSON.stringify(userData.approvalGroup) !== JSON.stringify(groupSelect) ||\r\n//         JSON.stringify(userData.listBoss) !== JSON.stringify(userSelect) ||\r\n//         !isNullOrEmpty(password.value) && password.value === rePassWord.value\r\n//         ) &&\r\n//         (\r\n//           !isNullOrEmpty(status.value) &&\r\n//           !isNullOrEmpty(departmentId.value) &&\r\n//           !isNullOrEmpty(name.value) \r\n//           &&\r\n//           password.value === rePassWord.value\r\n//         )\r\n//       )\r\n//       return true;\r\n//     }\r\n//   };\r\n  // console.log(status.value)\r\n  // console.log(userData.status)\r\n//   const handleClosePopup = () => {\r\n//     setOpen(false);\r\n//   };\r\n\r\n//   const handleClosePopupStatus = () => {\r\n//     setStatus(false);\r\n//   };\r\n\r\n//   const getGroupSelected = list => {\r\n//     let data = [];\r\n//       // let resultFiles = res.data.data;\r\n//       if (list && list.length > 0) {\r\n//         list.forEach(function(item) {\r\n//           data.push({\r\n//             id: item.id,\r\n//             approvalGroupName: item.approvalGroupName\r\n//           });\r\n//         });\r\n//       }\r\n//     setGroupSelect(data);\r\n//   };\r\n\r\n//   const handleSelectBoss = (value) => {\r\n//     if (value.length > 20) return; // max 20 boss\r\n//     let data = [];\r\n//       // let resultFiles = res.data.data;\r\n//       if (value && value.length > 0) {\r\n//         value.forEach(function(item) {\r\n//           data.push({\r\n//             id: item.id,\r\n//             userName: item.userName\r\n//           });\r\n//         });\r\n//       }\r\n//     setUserSelect(data)\r\n//   }\r\n\r\n  // cance\r\n//   const handleCance = flag => {\r\n//     setOpenPopupQuestionCance(false);\r\n//     // no\r\n//     if (flag === 'no') return;\r\n//     // yes\r\n//     window.location.href = `${folderRoot}users`;\r\n//   };\r\n\r\n  // rending option department\r\n//   const optionDeparment = []\r\n//     !isNullOrEmpty(listDepartment) &&\r\n//     listDepartment.map(e => {\r\n//       optionDeparment.push (\r\n//         <option value={e.id} key={e.id}>\r\n//           {e.departmentName}\r\n//         </option>\r\n//       );\r\n//     });\r\n\r\n//   // rending option user status\r\n//   const optionStatus = []\r\n//   !isNullOrEmpty(listStatus) &&\r\n//   listStatus.map(e => {\r\n//     optionStatus.push (\r\n//       <option value={e.id} key={e.id}>\r\n//         {e.userStatusName}\r\n//       </option>\r\n//     );\r\n//   });\r\n\r\n  //show pass\r\n//   const handleClickShowPassword = () => {\r\n//     setShowpass({ ...showPass, password : !showPass.password});\r\n//   };\r\n//   const handleClickShowRePassword = () => {\r\n//     setShowpass({ ...showPass, rePassWord : !showPass.rePassWord});\r\n//   };\r\n//   const handleMouseDownPassword = event => {\r\n//     event.preventDefault();\r\n//   };\r\n// console.log(userSelect)\r\n// console.log(userData)\r\n// console.log(status.value)\r\n  return (\r\n    <div className={classes.root}>\r\n      <div className={classes.headFormGroup}>\r\n        <Typography className={classes.titleForm}>\r\n          {isNew ? `Thêm thiết bị mới` : `Chỉnh sửa thông tin thiết bị`}\r\n        </Typography>\r\n      </div>\r\n      <div className={clsx(classes.formContent, classes.scrollPage)}>\r\n        <div className={classes.formGroup}>\r\n          <label>\r\n            Id loại thiết bị <em>（Bắt Buộc）</em>\r\n          </label>\r\n          <TextField {...deviceTypeId} />\r\n        </div>\r\n        <div className={classes.formGroup}>\r\n          <label>\r\n            Code <em>（Bắt Buộc）</em>\r\n          </label>\r\n          <TextField {...code} />\r\n        </div>\r\n        <div className={classes.formGroup}>\r\n          <label>\r\n            Imei <em>（Bắt Buộc）</em>\r\n          </label>\r\n          <TextField {...imei} />\r\n        </div>\r\n        \r\n        {/* row submit */}\r\n        <div className={classes.rowSubmit}>\r\n          <Typography\r\n            className={classNames({\r\n              [classes.msgError]: statusSubmit.status === -1,\r\n              [classes.msgSuc]: statusSubmit.status === 1\r\n            })}\r\n          >\r\n            {statusSubmit.msg}\r\n          </Typography>\r\n          <div style={{ position: 'relative' }}>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              // onClick={handleSave}\r\n              // disabled={!isValid || statusSubmit.isLoading}\r\n            >\r\n              {isNew ? `Thêm mới` : `Chỉnh sửa`}\r\n            </Button>\r\n            {statusSubmit.isLoading && (\r\n              <CircularProgress size={24} className={classes.iconProgress} />\r\n            )}\r\n          </div>\r\n          {/*<Button\r\n            variant=\"contained\"\r\n            className={classes.btnCance}\r\n            onClick={() => setOpenPopupQuestionCance(true)}\r\n          >\r\n            キャンセル\r\n          </Button>*/}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction useFormInput(initValue, isRequire, isEmailControl = false) {\r\n  const classes = useStyles();\r\n  const [value, setValue] = useState(initValue);\r\n  const [isFirst, setIsFirst] = useState(true);\r\n  useEffect(() => {\r\n    if (!isNullOrEmpty(initValue)) {\r\n      setValue(initValue);\r\n    }\r\n  }, [initValue]);\r\n\r\n  function handleChange(e) {\r\n    setValue(e.target.value);\r\n\r\n    // check first time\r\n    if (isFirst) {\r\n      setIsFirst(!isFirst);\r\n    }\r\n  }\r\n  let error = isRequire && isNullOrEmpty(value) && !isFirst ? true : false;\r\n  let errorMsg =\r\n    isRequire && isNullOrEmpty(value) && !isFirst ? 'Đây là một mục bắt buộc.' : null;\r\n\r\n  if (!isFirst && !isNullOrEmpty(value) && isEmailControl && !isEmail(value)) {\r\n    error = true;\r\n    errorMsg = 'Địa chỉ email không hợp lệ.';\r\n  }\r\n\r\n  return {\r\n    value: value,\r\n    error: error,\r\n    helperText: errorMsg,\r\n    onChange: handleChange,\r\n    variant: 'outlined',\r\n    className: classes.inputControl,\r\n    InputProps: {\r\n      classes: {\r\n        root: classes.rootInput,\r\n        input: classes.thisInput,\r\n        error: classes.thisInputError\r\n      }\r\n    }\r\n  };\r\n}\r\n// function useFormSelect(initValue, isRequire) {\r\n//   const [value, setValue] = useState(initValue);\r\n//   const [isFirst, setIsFirst] = useState(true);\r\n//   useEffect(() => {\r\n//     if (!isNullOrEmpty(initValue)) {\r\n//       setValue(initValue);\r\n//     }\r\n//   }, [initValue]);\r\n\r\n//   function handleChange(e) {\r\n//     setValue(e.target.value);\r\n\r\n//     // check first time\r\n//     if (isFirst) {\r\n//       setIsFirst(!isFirst);\r\n//     }\r\n//   }\r\n//   let error = isRequire && isNullOrEmpty(value) && !isFirst ? true : false;\r\n\r\n//   return {\r\n//     value: value,\r\n//     error: error,\r\n//     onChange: handleChange,\r\n//   };\r\n// }\r\n\r\n// // insert new user\r\n// async function callAPIUser(data, userId) {\r\n//   try {\r\n//     let res;\r\n//     if (userId) {\r\n//       // update\r\n//       res = await axios.put(`${apiRoot}/users/${userId}`, data);\r\n//     } else {\r\n//       // insert\r\n//       res = await axios.post(`${apiRoot}/users`, data);\r\n//     }\r\n//     // error\r\n//     if (res.data.code !== 1 || res.status !== 200) {\r\n//       return false;\r\n//     }\r\n//     // success\r\n//     // console.log(res)\r\n//     return res.data.data;\r\n//   } catch (error) {\r\n//     const result = error.response;\r\n//     if (result.status === 400 && result.data.code === -1) {\r\n//       // email đã tồn tại\r\n//       return -1;\r\n//     }\r\n//     return false;\r\n//   }\r\n// }\r\n"],"sourceRoot":""}